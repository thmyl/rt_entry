import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker


# search width = 1
naive_width1_x = [63.23, 70.99, 76.53, 80.76, 83.75, 86.09, 88.05, 90.26, 91.91, 92.73, 93.40, 94.25, 95.27, 96.08, 96.88, 97.54, 97.98, 98.06]
naive_width1_y = [2947817.731, 2686864.724, 2452140.351, 2279992.157, 2114245.362, 1979998.06, 1844205.231, 1692285.042, 1563279.197, 1484188.201, 1416942.38, 1315263.368, 1182666.369, 1068096.492, 944590.3312, 831697.6613, 752995.0378, 738154.4662]

naive_rt_width1_x = [77.18, 81.61, 84.90, 87.40, 89.31, 90.89, 92.09, 93.47, 94.49, 95.06, 95.55, 96.11, 96.87, 97.40, 97.91, 98.29, 98.53, 98.57]
naive_rt_width1_y = [3027312.413, 2754517.409, 2531908.375, 2320024.128, 2165055.144, 2009452.464, 1894326.87, 1714086.88, 1583355.764, 1492441.53, 1431280.638, 1325021.035, 1182508.337, 1069212.247, 948379.6933, 826343.8417, 769165.686, 762631.0772]

pca64_width1_x = [63.96, 71.88, 77.34, 81.43, 84.36, 86.82, 88.65, 90.66, 92.01, 92.82, 93.43, 94.26, 95.22, 95.96, 96.65, 97.20, 97.49, 97.57]
pca64_width1_y = [11691940.75, 10652009.5, 9911981.603, 9126585.744, 8407600.471, 7966794.401, 7499175.091, 6869924.843, 6366142.309, 6052426.115, 5777775.21, 5374379.259, 4858118.645, 4406625.803, 3926850.627, 3467105.833, 3122989.575, 3109017.706]

pca64_rt_width1_x = [76.85, 81.28, 84.38, 86.83, 88.70, 90.25, 91.41, 92.77, 93.79, 94.28, 94.71, 95.32, 96.07, 96.60, 97.06, 97.49, 97.68, 97.69]
pca64_rt_width1_y = [10297494.62, 9320880.637, 9100837.277, 8438391.305, 7788950.595, 7393496.68, 6959765.595, 6239237.316, 5916214.569, 5677108.762, 5341737.667, 5101624.357, 4558113.67, 4201292.318, 3752993.012, 3324070.258, 3099026.286, 3077718.549]


###############################################################################################################
# search_width = 4
naive_width4_x = [65.97, 78.21, 85.47, 89.72, 92.23, 93.90, 95.07, 95.87, 96.93, 97.58, 98.03, 98.26, 98.35]
naive_width4_y = [1889234.199, 1680257.147, 1520225.845, 1403449.679, 1302534.472, 1201995.312, 1119728.04, 1051143.381, 927919.2339, 830095.9591, 752343.5502, 723526.1772, 713185.3711]

naive_rt_width4_x = [57.82, 67.72, 84.71, 89.52, 92.34, 94.15, 95.37, 96.23, 96.87, 97.34, 97.94, 98.34, 98.58, 98.64, 98.67]
naive_rt_width4_y = [2931743.156, 2570628.004, 2085366.566, 1836581.021, 1656693.373, 1519560.543, 1394855.772, 1273568.986, 1180188.877, 1093549.915, 957597.5792, 851005.889, 804971.504, 799283.8417, 793776.79]

pca64_width4_x = [66.00, 78.52, 85.72, 89.75, 92.21, 93.71, 94.76, 95.52, 96.53, 97.10, 97.48, 97.64, 97.71]
pca64_width4_y = [10489877.27, 9460737.938, 8560984.171, 8126777.733, 7501931.747, 7071785.697, 6621595.672, 6316720.359, 5564582.545, 5064060.364, 4625411.083, 4465362.186, 4340598.048]

pca64_rt_width4_x = [63.78, 74.86, 85.03, 89.36, 91.94, 93.61, 94.66, 95.45, 96.08, 96.53, 97.13, 97.54, 97.74, 97.79, 97.81]
pca64_rt_width4_y = [11484484.46, 10579323.77, 9399821.403, 8745539.775, 8002112.558, 7622474.103, 7219851.704, 6679758.994, 6309944.472, 5994952.25, 5203698.789, 4859039.271, 4636777.996, 4528923.973, 4399646.268]



###############################################################################################################
ggnn_x = [62.34, 68.86, 72.15, 77.09, 80.79, 83.46, 85.42, 87.13, 88.51, 89.89, 90.80, 91.80, 92.72, 93.68, 94.50, 95.48, 96.16, 97.20, 97.88, 98.11, 98.47, 99.18]
ggnn_y = [755201.45, 750170.6638, 715819.6135, 595177.8689, 667712.75, 657868.7683, 600373.4323, 570857.7137, 549831.2018, 513977.6214, 544870.0485, 500120.0288, 492945.9435, 449644.3313, 428550.0011, 370049.6607, 358918.2205, 318587.0029, 295150.6744, 274642.2784, 246558.0496, 214788.6265]

ganns_x = [66.20, 78.49, 85.37, 89.53, 92.08, 93.66, 94.90, 95.65, 96.18, 97.05, 97.40, 97.55, 97.58]
ganns_y = [1417836.382, 1244400.199, 1105338.786, 990393.1861, 895495.6568, 815660.6852, 755229.9675, 697107.0059, 647668.3938, 570320.5201, 534673.5818, 523971.7055, 517036.3477]




# 放入列表，便于遍历
all_groups = [
    # (naive_width1_x, naive_width1_y),
    # (naive_rt_width1_x, naive_rt_width1_y),
    # (pca64_width1_x, pca64_width1_y),
    # (pca64_rt_width1_x, pca64_rt_width1_y),
    (naive_width4_x, naive_width4_y),
    (naive_rt_width4_x, naive_rt_width4_y),
    (pca64_width4_x, pca64_width4_y),
    (pca64_rt_width4_x, pca64_rt_width4_y),
    (ggnn_x, ggnn_y),
    (ganns_x, ganns_y),
]

colors = ['#598865', '#9fa167', '#e85d04', '#eeba0b', '#6a605c', '#215a84']
markers = ['o', 's', '^', 'v', 'D', '*']


plt.figure(figsize=(8, 6))
plt.rcParams.update({'font.size': 16})  # 所有文字统一为16号字体

for i, (x, y) in enumerate(all_groups):
    x = np.array(x) * 0.01
    y = np.array(y)
    
    # 过滤掉 <= 0 的 y 值，避免 log10 出错
    mask = y > 0
    x = x[mask]
    y = y[mask]
    
    y_log = np.log10(y)
    plt.plot(x, y_log, marker=markers[i % len(markers)], color=colors[i % len(colors)], label=f'Group {i+1}')

plt.xlim(0.75, 1)
plt.xticks([0.75, 0.80, 0.85, 0.90, 0.95, 1.0])
plt.xlabel('Recall')


### y 轴刻度设置

# 设置主刻度位置与标签
main_qps = [5e5, 1e6, 5e6]
main_qps_log = np.log10(main_qps)
main_labels = [r'$5\times10^5$', r'$1\times10^6$', r'$5\times10^6$']

# 设置副刻度位置（不加标签）
minor_qps = [2e5, 3e5, 4e5, 6e5, 7e5, 8e5, 9e5, 2e6, 3e6, 4e6]
minor_qps_log = np.log10(minor_qps)

ax = plt.gca()
ax.set_yticks(main_qps_log)  # 主刻度
ax.set_yticklabels(main_labels)
ax.set_yticks(minor_qps_log, minor=True)  # 副刻度

# 控制主副刻度样式
ax.tick_params(axis='y', which='major', length=6, width=1.5)  # 主刻度稍大
ax.tick_params(axis='y', which='minor', length=4, width=0.8)  # 副刻度短细

plt.ylabel('Queries per Second')

### end of yticks

plt.title('COCO-I2I')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
plt.savefig("./img/COCO-I2I.png", format="png", bbox_inches="tight")
print("图像已保存到文件：./img/COCO-I2I.png")